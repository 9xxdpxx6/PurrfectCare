<?php

namespace App\Services\Bot;

use App\Models\Branch;
use App\Models\Employee;
use App\Models\Schedule;
use App\Models\Visit;
use App\Models\Status;
use App\Models\TelegramProfile;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Models\Pet;
use App\Models\User;

class AppointmentService
{
    private int $currentScheduleId = 0;

    public function __construct(
        private TelegramApiService $apiService
    ) {
    }

    public function sendBranches(string $chatId): array
    {
        Log::info('AppointmentService: sending branches');
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É is_active - —Ç–∞–∫–æ–π –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
        $branches = Branch::select('id', 'name')
            ->orderBy('name')
            ->get();
        
        if ($branches->isEmpty()) {
            $keyboard = [
                [
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => '‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤.',
                'keyboard' => $keyboard
            ];
        }

        $keyboard = [];
        foreach ($branches as $branch) {
            $keyboard[] = [[
                'text' => $branch->name,
                'callback_data' => "branch:{$branch->id}"
            ]];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        $keyboard[] = [
            ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
        ];

        return [
            'action' => 'send_message',
            'message' => '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:',
            'keyboard' => $keyboard
        ];
    }

    public function sendVeterinarians(string $chatId, int $branchId): array
    {
        Log::info('AppointmentService: sending veterinarians', ['branch_id' => $branchId]);

        // –£–ø—Ä–æ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞
        $employeeIds = \DB::table('branch_employee')
            ->where('branch_id', $branchId)
            ->pluck('employee_id');

        if ($employeeIds->isEmpty()) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –í —ç—Ç–æ–º —Ñ–∏–ª–∏–∞–ª–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
                'keyboard' => []
            ];
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        $branch = Branch::select('name')->find($branchId);
        $branchName = $branch ? $branch->name : '–§–∏–ª–∏–∞–ª';

        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–≤ —Å –∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
        $veterinarians = Employee::select('employees.id', 'employees.name')
            ->whereIn('employees.id', $employeeIds)
            ->whereHas('specialties', function ($query) {
                $query->where('is_veterinarian', true);
            })
            ->with(['specialties' => function ($query) {
                $query->select('specialties.id', 'specialties.name', 'specialties.is_veterinarian')
                    ->where('specialties.is_veterinarian', true);
            }])
            ->orderBy('employees.name')
            ->get();

        if ($veterinarians->isEmpty()) {
            $keyboard = [
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_branches'],
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => "‚ùå –í —Ñ–∏–ª–∏–∞–ª–µ '{$branchName}' –Ω–µ—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–≤.",
                'keyboard' => $keyboard
            ];
        }

        $keyboard = [];
        foreach ($veterinarians as $veterinarian) {
            $specialties = $veterinarian->specialties->pluck('name')->toArray();
            $specialtyText = implode(', ', $specialties);
            
            $keyboard[] = [[
                'text' => "{$veterinarian->name} ({$specialtyText})",
                'callback_data' => "vet:{$veterinarian->id}:{$branchId}"
            ]];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        $keyboard[] = [
            ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_branches'],
            ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
        ];

        return [
            'action' => 'send_message',
            'message' => "{$branchName}. –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞:",
            'keyboard' => $keyboard
        ];
    }

    public function sendDates(string $chatId, int $employeeId, int $branchId): array
    {
        Log::info('AppointmentService: sending dates', ['employee_id' => $employeeId, 'branch_id' => $branchId]);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ veterinarian_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã schedules
        $schedules = Schedule::select('id', 'shift_starts_at')
            ->where('veterinarian_id', $employeeId)
            ->where('branch_id', $branchId) // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–∏–ª–∏–∞–ª—É
            ->where('shift_starts_at', '>=', now())
            ->where('shift_starts_at', '<=', now()->addDays(30))
            ->orderBy('shift_starts_at')
            ->get()
            ->groupBy(function ($schedule) {
                return $schedule->shift_starts_at->format('Y-m-d');
            });
        
        if ($schedules->isEmpty()) {
            $keyboard = [
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => '‚ùå –£ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π.',
                'keyboard' => $keyboard
            ];
        }

        $employee = Employee::select('name')->find($employeeId);
        $employeeName = $employee ? $employee->name : '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä';

        $keyboard = [];
        foreach ($schedules->keys() as $date) {
            $carbonDate = Carbon::parse($date)->locale('ru');
            $formattedDate = $carbonDate->translatedFormat('d F Y');
            $dayOfWeek = $carbonDate->translatedFormat('l');
            
            $keyboard[] = [[
                'text' => "üìÖ {$formattedDate} ({$dayOfWeek})",
                'callback_data' => "date:{$employeeId}:{$branchId}:{$date}"
            ]];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        $keyboard[] = [
            ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
            ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
        ];

        return [
            'action' => 'send_message',
            'message' => "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ {$employeeName}:",
            'keyboard' => $keyboard
        ];
    }

    public function sendTimeSlots(string $chatId, int $employeeId, int $branchId, string $dateYmd): array
    {
        Log::info('AppointmentService: sending time slots', [
            'chat_id' => $chatId,
            'employee_id' => $employeeId,
            'branch_id' => $branchId,
            'date' => $dateYmd
        ]);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        $schedules = Schedule::where('veterinarian_id', $employeeId)
            ->where('shift_starts_at', '>=', $dateYmd . ' 00:00:00')
            ->where('shift_starts_at', '<', $dateYmd . ' 23:59:59')
            ->get();

        Log::info('AppointmentService: found schedules', [
            'count' => $schedules->count(),
            'schedules' => $schedules->toArray(),
            'query' => 'SELECT * FROM schedules WHERE veterinarian_id = ' . $employeeId . ' AND shift_starts_at >= "' . $dateYmd . ' 00:00:00" AND shift_starts_at < "' . $dateYmd . ' 23:59:59"'
        ]);

        $veterinarian = Employee::find($employeeId);
        $veterinarianName = $veterinarian ? $veterinarian->name : '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä';
        
        if ($schedules->isEmpty()) {
            $keyboard = [
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => "–ù–∞ —ç—Ç—É –¥–∞—Ç—É —É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞ {$veterinarianName} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                'keyboard' => $keyboard
            ];
        }

        $messages = [];
        $allAvailableSlots = [];

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –≥—Ä—É–∑–∏–º –≤—Å–µ –≤–∏–∑–∏—Ç—ã –ø–æ –≤—Å–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        $scheduleIds = $schedules->pluck('id')->all();
        $dayStart = $dateYmd . ' 00:00:00';
        $dayEnd = $dateYmd . ' 23:59:59';
        $visits = Visit::select('schedule_id', 'starts_at')
            ->whereIn('schedule_id', $scheduleIds)
            ->whereBetween('starts_at', [$dayStart, $dayEnd])
            ->get();
        $busy = [];
        foreach ($visits as $v) {
            $busy[$v->schedule_id . '|' . Carbon::parse($v->starts_at)->format('Y-m-d H:i:s')] = true;
        }
        
        foreach ($schedules as $schedule) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å 9:00 –¥–æ 18:00 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
            $startTime = Carbon::parse($schedule->shift_starts_at)->setTime(9, 0);
            $endTime = Carbon::parse($schedule->shift_starts_at)->setTime(18, 0);
            
            $currentTime = $startTime->copy();
            
            while ($currentTime < $endTime) {
                $key = $schedule->id . '|' . $currentTime->format('Y-m-d H:i:s');
                if (!isset($busy[$key])) {
                    $allAvailableSlots[] = [
                        'time' => $currentTime->format('H:i'),
                        'datetime' => $currentTime->format('Y-m-d H:i:s'),
                        'schedule_id' => $schedule->id
                    ];
                }
                $currentTime->addMinutes(30);
            }
        }
        
        if (empty($allAvailableSlots)) {
            $keyboard = [
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => "–ù–∞ —ç—Ç—É –¥–∞—Ç—É —É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞ {$veterinarianName} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.",
                'keyboard' => $keyboard
            ];
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        $uniqueSlots = [];
        foreach ($allAvailableSlots as $slot) {
            $timeKey = $slot['time'];
            if (!isset($uniqueSlots[$timeKey])) {
                $uniqueSlots[$timeKey] = $slot;
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        ksort($uniqueSlots);
        $uniqueSlots = array_values($uniqueSlots);

        $keyboard = [];
        $row = [];
        foreach ($uniqueSlots as $slot) {
            $row[] = [
                'text' => $slot['time'],
                'callback_data' => 'time:'.$slot['schedule_id'].':'.$slot['datetime'],
            ];
            if (count($row) === 3) {
                $keyboard[] = $row;
                $row = [];
            }
        }
        if (!empty($row)) {
            $keyboard[] = $row;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        $dateFormatted = Carbon::parse($dateYmd)->locale('ru')->translatedFormat('d F');
        $messages[] = [
            'message' => "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {$dateFormatted} —É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞ {$veterinarianName}:",
            'keyboard' => $keyboard
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        if (!empty($messages)) {
            $lastIndex = count($messages) - 1;
            $messages[$lastIndex]['keyboard'][] = [
                ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
            ];
        }

        Log::info('AppointmentService: time slots result', [
            'messages_count' => count($messages),
            'action' => 'send_multiple_messages'
        ]);

        return [
            'action' => 'send_multiple_messages',
            'messages' => $messages
        ];
    }

    public function tryBookSlot(string $chatId, int $scheduleId, string $startsAt, TelegramProfile $profile): array
    {
        if (!$profile->user_id) {
            $keyboard = [
                [
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                'keyboard' => $keyboard
            ];
        }

        $date = Carbon::parse($startsAt)->toDateString();

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 4 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
        $existingCount = Visit::where('client_id', $profile->user_id)
            ->whereDate('starts_at', $date)
            ->count();
        if ($existingCount >= 4) {
            $keyboard = [
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => '–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º 4 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.',
                'keyboard' => $keyboard
            ];
        }

        try {
            DB::beginTransaction();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –µ—â–µ —Å–≤–æ–±–æ–¥–µ–Ω
            $schedule = Schedule::lockForUpdate()->find($scheduleId);
            if (!$schedule) {
                throw new \Exception('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            $this->currentScheduleId = $scheduleId;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ
            $existingVisit = Visit::where('schedule_id', $scheduleId)
                ->where('starts_at', $startsAt)
                ->first();

            if ($existingVisit) {
                throw new \Exception('–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç');
            }

            // –ü–æ–ª—É—á–∞–µ–º pet_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
            $petId = $profile->data['selected_pet_id'] ?? null;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
            $petName = '';
            if ($petId) {
                $pet = Pet::where('id', $petId)
                    ->where('client_id', $profile->user_id)
                    ->first();
                
                if (!$pet) {
                    throw new \Exception('–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º');
                }
                $petName = $pet->name;
            }

            // –°–æ–∑–¥–∞–µ–º –≤–∏–∑–∏—Ç (pet_id –º–æ–∂–µ—Ç –±—ã—Ç—å null)
            $visit = Visit::create([
                'client_id' => $profile->user_id,
                'pet_id' => $petId, // –ú–æ–∂–µ—Ç –±—ã—Ç—å null
                'schedule_id' => $scheduleId,
                'starts_at' => $startsAt,
                'status_id' => 1, // –°—Ç–∞—Ç—É—Å "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
                'complaints' => null,
                'notes' => null,
            ]);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            $data = $profile->data ?? [];
            foreach ([
                'pet_name',
                'selected_gender',
                'selected_pet_id',
                'selected_breed_id',
                'selected_species_id'
            ] as $key) {
                if (array_key_exists($key, $data)) {
                    unset($data[$key]);
                }
            }
            $profile->data = $data;
            $profile->save();

            DB::commit();

            return $this->formatSuccessMessage($profile, $startsAt, $petName);
        } catch (\Throwable $e) {
            $keyboard = [
                [
                    ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_veterinarians'],
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: '.($e->getMessage() ?: '–∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–Ω—è—Ç'),
                'keyboard' => $keyboard
            ];
        }
    }

    protected function formatSuccessMessage(TelegramProfile $profile, string $startsAt, string $petName): array
    {
        $user = User::find($profile->user_id);
        $userName = $user ? $user->name : '–ö–ª–∏–µ–Ω—Ç';
        
        // –ü–æ–ª—É—á–∞–µ–º pet_id –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞
        $visit = Visit::where('client_id', $profile->user_id)
            ->where('starts_at', $startsAt)
            ->first();
        
        $petNameInMessage = $petName ?: '–ü–∏—Ç–æ–º–µ—Ü';

        $date = Carbon::parse($startsAt)->locale('ru');
        $endTime = $date->copy()->addMinutes(30);
        
        $message = "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n";
        $message .= "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {$userName}\n";
        
        // –ü–∏—Ç–æ–º–µ—Ü –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è
        if ($petName && $petName !== '–ü–∏—Ç–æ–º–µ—Ü') {
            $message .= "üêæ <b>–ü–∏—Ç–æ–º–µ—Ü:</b> {$petName}\n";
        }
        
        $message .= "üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á:</b> {$this->getVeterinarianName()}\n";
        $message .= "üè• <b>–§–∏–ª–∏–∞–ª:</b> {$this->getBranchName()}\n";
        $message .= "üìÖ <b>–î–∞—Ç–∞:</b> " . $date->translatedFormat('d F Y, l') . "\n";
        $message .= "üïê <b>–í—Ä–µ–º—è:</b> " . $date->format('H:i') . " - " . $endTime->format('H:i') . "\n";
        $message .= "‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 30 –º–∏–Ω—É—Ç";

        return [
            'action' => 'send_multiple_messages',
            'messages' => [
                [
                    'message' => $message,
                    'keyboard' => [] // –¢–∞–ª–æ–Ω –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                ],
                [
                    'message' => '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    'keyboard' => [
                        [
                            ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ', 'callback_data' => 'book_appointment'],
                            ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                        ]
                    ]
                ]
            ]
        ];
    }

    private function getVeterinarianName(): string
    {
        $schedule = Schedule::find($this->currentScheduleId);
        if ($schedule && $schedule->veterinarian) {
            return $schedule->veterinarian->name;
        }
        return '–í—Ä–∞—á';
    }

    private function getBranchName(): string
    {
        $schedule = Schedule::find($this->currentScheduleId);
        if ($schedule && $schedule->branch) {
            return $schedule->branch->name;
        }
        return '–§–∏–ª–∏–∞–ª';
    }
}
