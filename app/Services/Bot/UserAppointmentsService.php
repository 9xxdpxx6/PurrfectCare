<?php

namespace App\Services\Bot;

use App\Models\Visit;
use App\Models\Schedule;
use App\Models\Employee;
use App\Models\Branch;
use App\Models\TelegramProfile;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class UserAppointmentsService
{
    public function __construct(
        private TelegramApiService $apiService
    ) {
    }

    public function showUserAppointments(string $chatId, TelegramProfile $profile): array
    {
        if (!$profile->user_id) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
                'keyboard' => [
                    [
                        ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                    ]
                ]
            ];
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏ (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        $upcomingVisits = Visit::with(['schedule.veterinarian', 'schedule.branch', 'pet'])
            ->where('client_id', $profile->user_id)
            ->where('starts_at', '>=', Carbon::now())
            ->orderBy('starts_at')
            ->get();

        if ($upcomingVisits->isEmpty()) {
            return [
                'action' => 'send_message',
                'message' => 'üìã –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏—ë–º!',
                'keyboard' => [
                    [
                        ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º', 'callback_data' => 'book_appointment'],
                        ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                    ]
                ]
            ];
        }

        $message = "üìã <b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n";
        
        foreach ($upcomingVisits as $index => $visit) {
            $visitDate = Carbon::parse($visit->starts_at);
            $endTime = Carbon::parse($visit->starts_at)->addMinutes(30);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∏—Ç–æ–º–µ—Ü
            $petName = $visit->pet ? $visit->pet->name : '–ë–µ–∑ –ø–∏—Ç–æ–º—Ü–∞';
            $message .= ($index + 1) . ". <b>{$petName}</b>\n";
            $message .= "   üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: " . ($visit->schedule->veterinarian->name ?? '–ù–µ —É–∫–∞–∑–∞–Ω') . "\n";
            $message .= "   üè• –§–∏–ª–∏–∞–ª: " . ($visit->schedule->branch->name ?? '–ù–µ —É–∫–∞–∑–∞–Ω') . "\n";
            $message .= "   üìÖ –î–∞—Ç–∞: " . $visitDate->format('d.m.Y, l') . "\n";
            $message .= "   üïê –í—Ä–µ–º—è: " . $visitDate->format('H:i') . " - " . $endTime->format('H:i') . "\n";
            
            if ($visit->complaints) {
                $message .= "   üìù –ñ–∞–ª–æ–±—ã: {$visit->complaints}\n";
            }
            
            $message .= "\n";
        }

        $keyboard = [
            [
                ['text' => 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º', 'callback_data' => 'book_appointment'],
                ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
            ]
        ];

        return [
            'action' => 'send_message',
            'message' => $message,
            'keyboard' => $keyboard
        ];
    }
}
