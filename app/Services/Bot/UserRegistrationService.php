<?php

namespace App\Services\Bot;

use App\Models\User;
use App\Models\TelegramProfile;
use App\Traits\NormalizesPhone;
use Illuminate\Support\Facades\Log;
use App\Services\NotificationService;

class UserRegistrationService
{
    use NormalizesPhone;

    protected $notificationService;

    public function __construct(NotificationService $notificationService)
    {
        $this->notificationService = $notificationService;
    }

    public function handleRegistrationFlow(TelegramProfile $profile, string $chatId, string $text): array
    {
        Log::info('UserRegistrationService: handling registration flow', [
            'chat_id' => $chatId,
            'current_state' => $profile->state,
            'text' => $text,
            'profile_data' => $profile->data
        ]);

        switch ($profile->state) {
            case 'start':
                return $this->handleStartState($profile, $chatId);
            
            case 'await_name':
                return $this->handleNameInput($profile, $chatId, $text);
            
            case 'await_phone':
                return $this->handlePhoneInput($profile, $chatId, $text);
            
            case 'await_email':
                return $this->handleEmailInput($profile, $chatId, $text);
            
            case 'awaiting_verification_code':
                return $this->handleVerificationCode($profile, $chatId, $text);
            
            case 'await_phone_existing':
                return $this->handleExistingPhoneInput($profile, $chatId, $text);
            
            case 'confirm_profile':
                return $this->handleProfileConfirmation($profile, $chatId, $text);
            
            default:
                Log::warning('UserRegistrationService: unknown state', [
                    'state' => $profile->state,
                    'text' => $text,
                    'profile_data' => $profile->data
                ]);
                return ['action' => 'error', 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'];
        }
    }

    protected function handleStartState(TelegramProfile $profile, string $chatId): array
    {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        if ($profile->user_id) {
            Log::info('UserRegistrationService: user already registered, not starting registration');
            
            $keyboard = [
                [
                    ['text' => 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'callback_data' => 'main_menu']
                ]
            ];
            
            return [
                'action' => 'send_message',
                'message' => '‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
                'keyboard' => $keyboard
            ];
        }

        $profile->state = 'await_name';
        $profile->save();
        
        Log::info('UserRegistrationService: state changed to await_name');
        
        return [
            'action' => 'send_message',
            'message' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç.',
            'keyboard' => null
        ];
    }

    protected function handleNameInput(TelegramProfile $profile, string $chatId, string $text): array
    {
        $profile->data = ['name' => $text];
        $profile->state = 'await_phone';
        $profile->save();
        
        Log::info('UserRegistrationService: name received, state changed to await_phone');
        
        $message = "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n";
        $message .= "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n";
        $message .= "‚Ä¢ +7XXXXXXXXXX\n";
        $message .= "‚Ä¢ 8XXXXXXXXXX\n";
        $message .= "‚Ä¢ 7XXXXXXXXXX\n";
        $message .= "‚Ä¢ 8 967-411 5225\n";
        $message .= "‚Ä¢ +7 (963) 45-78 456\n";
        $message .= "‚Ä¢ 8.967.411.52.25\n\n";
        $message .= "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–µ—Ä–µ—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.";
        
        return [
            'action' => 'send_message',
            'message' => $message,
            'keyboard' => null
        ];
    }

    protected function handlePhoneInput(TelegramProfile $profile, string $chatId, string $text): array
    {
        if (!$this->validatePhone($text)) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX',
                'keyboard' => null
            ];
        }
        
        $normalizedPhone = $this->normalizePhone($text);
        $data = $profile->data ?? [];
        $data['phone'] = $normalizedPhone;
        $profile->data = $data;
        $profile->state = 'await_email';
        $profile->save();

        Log::info('UserRegistrationService: phone received, now asking for email', [
            'original_phone' => $text,
            'normalized_phone' => $normalizedPhone
        ]);
        
        return [
            'action' => 'send_message',
            'message' => "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\nüìß Email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è:\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É",
            'keyboard' => null
        ];
    }

    protected function handleEmailInput(TelegramProfile $profile, string $chatId, string $text): array
    {
        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if (!filter_var($text, FILTER_VALIDATE_EMAIL)) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.',
                'keyboard' => null
            ];
        }

        $email = strtolower(trim($text));
        $data = $profile->data ?? [];
        $data['email'] = $email;
        $profile->data = $data;
        $profile->state = 'verifying_email';
        $profile->save();

        Log::info('UserRegistrationService: email received, starting verification', [
            'email' => $email,
            'phone' => $data['phone'] ?? null
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        $existingUserByEmail = User::where('email', $email)->first();
        if ($existingUserByEmail) {
            return $this->handleExistingEmailUser($profile, $chatId, $existingUserByEmail, $data);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        $existingUserByPhone = User::where('phone', $data['phone'])->first();
        if ($existingUserByPhone) {
            return $this->handleExistingPhoneUser($profile, $chatId, $existingUserByPhone, $data);
        }

        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        return $this->sendVerificationCode($profile, $chatId, $data);
    }

    protected function handleExistingEmailUser(TelegramProfile $profile, string $chatId, User $existingUser, array $data): array
    {
        $profile->data = array_merge($data, [
            'found_user_id' => $existingUser->id,
            'found_user_name' => $existingUser->name,
            'found_user_email' => $existingUser->email
        ]);
        $profile->state = 'confirm_existing_email_user';
        $profile->save();

        $keyboard = [
            [
                ['text' => '‚úÖ –î–∞, —ç—Ç–æ –º–æ–π –∞–∫–∫–∞—É–Ω—Ç', 'callback_data' => 'confirm_existing_email_user'],
                ['text' => '‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π email', 'callback_data' => 'use_different_email']
            ]
        ];

        return [
            'action' => 'send_message',
            'message' => "üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:\n\nüë§ –ò–º—è: {$existingUser->name}\nüìß Email: {$existingUser->email}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {$existingUser->phone}\n\n–≠—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç? –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞ –≤–∞—à email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            'keyboard' => $keyboard
        ];
    }

    protected function handleExistingPhoneUser(TelegramProfile $profile, string $chatId, User $existingUser, array $data): array
    {
        $profile->data = array_merge($data, [
            'found_user_id' => $existingUser->id,
            'found_user_name' => $existingUser->name,
            'found_user_phone' => $existingUser->phone
        ]);
        $profile->state = 'confirm_existing_phone_user';
        $profile->save();

        $keyboard = [
            [
                ['text' => '‚úÖ –î–∞, —ç—Ç–æ –º–æ–π –∞–∫–∫–∞—É–Ω—Ç', 'callback_data' => 'confirm_existing_phone_user'],
                ['text' => '‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', 'callback_data' => 'use_different_phone']
            ]
        ];

        return [
            'action' => 'send_message',
            'message' => "üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:\n\nüë§ –ò–º—è: {$existingUser->name}\nüìß Email: {$existingUser->email}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {$existingUser->phone}\n\n–≠—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç?",
            'keyboard' => $keyboard
        ];
    }

    protected function sendVerificationCodeForExistingUser(TelegramProfile $profile, string $chatId, array $data, User $existingUser): array
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        $verificationCode = str_pad(rand(0, 999999), 6, '0', STR_PAD_LEFT);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
        $profile->data = array_merge($data, [
            'verification_code' => $verificationCode,
            'verification_code_created_at' => now()->timestamp,
            'verifying_existing_user' => true
        ]);
        $profile->state = 'awaiting_verification_code';
        $profile->save();

        Log::info('UserRegistrationService: verification code generated for existing user', [
            'email' => $existingUser->email,
            'user_id' => $existingUser->id,
            'code' => $verificationCode
        ]);

        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—á—Ç—ã (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            Log::info('UserRegistrationService: attempting to send email', [
                'email' => $existingUser->email,
                'mail_host' => config('mail.mailers.smtp.host'),
                'mail_port' => config('mail.mailers.smtp.port'),
                'mail_username' => config('mail.mailers.smtp.username'),
                'mail_encryption' => config('mail.mailers.smtp.encryption'),
                'mail_from_address' => config('mail.from.address'),
                'mail_from_name' => config('mail.from.name')
            ]);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            \Mail::to($existingUser->email)->send(new \App\Mail\VerificationCode($verificationCode, $existingUser->name));
            
            Log::info('UserRegistrationService: email sent successfully', [
                'email' => $existingUser->email,
                'verification_code' => $verificationCode
            ]);
            
            return [
                'action' => 'send_message',
                'message' => "üìß –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: {$existingUser->email}\n\n–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ Telegram.\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n\nüí° –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º' –≤ –≤–∞—à–µ–π –ø–æ—á—Ç–µ.",
                'keyboard' => null
            ];
        } catch (\Exception $e) {
            Log::error('UserRegistrationService: failed to send verification email for existing user', [
                'email' => $existingUser->email,
                'error' => $e->getMessage(),
                'error_class' => get_class($e),
                'error_code' => $e->getCode(),
                'error_file' => $e->getFile(),
                'error_line' => $e->getLine(),
                'mail_config' => [
                    'host' => config('mail.mailers.smtp.host'),
                    'port' => config('mail.mailers.smtp.port'),
                    'username' => config('mail.mailers.smtp.username'),
                    'encryption' => config('mail.mailers.smtp.encryption')
                ]
            ]);
            
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ email –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                'keyboard' => null
            ];
        }
    }

    protected function sendVerificationCode(TelegramProfile $profile, string $chatId, array $data): array
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        $verificationCode = str_pad(rand(0, 999999), 6, '0', STR_PAD_LEFT);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
        $profile->data = array_merge($data, [
            'verification_code' => $verificationCode,
            'verification_code_created_at' => now()->timestamp
        ]);
        $profile->state = 'awaiting_verification_code';
        $profile->save();

        Log::info('UserRegistrationService: verification code generated', [
            'email' => $data['email'],
            'code' => $verificationCode
        ]);

        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—á—Ç—ã (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            Log::info('UserRegistrationService: attempting to send email', [
                'email' => $data['email'],
                'mail_host' => config('mail.mailers.smtp.host'),
                'mail_port' => config('mail.mailers.smtp.port'),
                'mail_username' => config('mail.mailers.smtp.username'),
                'mail_encryption' => config('mail.mailers.smtp.encryption'),
                'mail_from_address' => config('mail.from.address'),
                'mail_from_name' => config('mail.from.name')
            ]);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email
            \Mail::to($data['email'])->send(new \App\Mail\VerificationCode($verificationCode, $data['name'] ?? '–ö–ª–∏–µ–Ω—Ç'));
            
            Log::info('UserRegistrationService: email sent successfully', [
                'email' => $data['email'],
                'verification_code' => $verificationCode
            ]);
            
            return [
                'action' => 'send_message',
                'message' => "üìß –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: {$data['email']}\n\n–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n\nüí° –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º' –≤ –≤–∞—à–µ–π –ø–æ—á—Ç–µ.",
                'keyboard' => null
            ];
        } catch (\Exception $e) {
            Log::error('UserRegistrationService: failed to send verification email', [
                'email' => $data['email'],
                'error' => $e->getMessage(),
                'error_class' => get_class($e),
                'error_code' => $e->getCode(),
                'error_file' => $e->getFile(),
                'error_line' => $e->getLine(),
                'mail_config' => [
                    'host' => config('mail.mailers.smtp.host'),
                    'port' => config('mail.mailers.smtp.port'),
                    'username' => config('mail.mailers.smtp.username'),
                    'encryption' => config('mail.mailers.smtp.encryption')
                ]
            ]);
            
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ email –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                'keyboard' => null
            ];
        }
    }

    protected function handleVerificationCode(TelegramProfile $profile, string $chatId, string $text): array
    {
        $data = $profile->data ?? [];
        $storedCode = $data['verification_code'] ?? null;
        $codeCreatedAt = $data['verification_code_created_at'] ?? null;
        
        if (!$storedCode || !$codeCreatedAt) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ (10 –º–∏–Ω—É—Ç)
        if (now()->timestamp - $codeCreatedAt > 600) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if ($text !== $storedCode) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                'keyboard' => null
            ];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if (isset($data['verifying_existing_user']) && $data['verifying_existing_user']) {
            Log::info('UserRegistrationService: verification code confirmed for existing user, linking account');
            return $this->linkExistingUserAfterVerification($profile, $chatId, $data);
        } else {
            // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Log::info('UserRegistrationService: verification code confirmed, creating user');
            return $this->createNewUser($profile, $chatId, $data);
        }
    }

    protected function handleExistingPhoneInput(TelegramProfile $profile, string $chatId, string $text): array
    {
        if (!$this->validatePhone($text)) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX',
                'keyboard' => null
            ];
        }
        
        $normalizedPhone = $this->normalizePhone($text);
        
        Log::info('UserRegistrationService: phone received for existing account', [
            'original_phone' => $text,
            'normalized_phone' => $normalizedPhone,
            'chat_id' => $chatId
        ]);
        
        $existingUser = User::where('phone', $normalizedPhone)->first();
        
        if ($existingUser) {
            return $this->prepareProfileConfirmation($profile, $chatId, $existingUser, $normalizedPhone);
        } else {
            return $this->handleUserNotFound($chatId, $normalizedPhone);
        }
    }

    protected function linkExistingUserAfterVerification(TelegramProfile $profile, string $chatId, array $data): array
    {
        $foundUserId = $data['found_user_id'] ?? null;
        if (!$foundUserId) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        $user = User::find($foundUserId);
        if (!$user) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        $profile->user_id = $user->id;
        $profile->state = 'start';
        $profile->data = [];
        $profile->save();

        // –û–±–Ω–æ–≤–ª—è–µ–º telegram ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user->telegram = (string)$chatId;
        $user->save();

        Log::info('UserRegistrationService: existing user verified and linked after code confirmation', [
            'user_id' => $user->id,
            'user_name' => $user->name
        ]);

        return [
            'action' => 'send_message_and_branches',
            'message' => "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$user->name}!",
            'keyboard' => null
        ];
    }

    protected function linkExistingUser(TelegramProfile $profile, string $chatId, User $existingUser): array
    {
        Log::info('UserRegistrationService: existing user found, linking Telegram', [
            'existing_user_id' => $existingUser->id,
            'existing_name' => $existingUser->name
        ]);
        
        $existingUser->telegram = (string)$chatId;
        $existingUser->save();
        
        $profile->user_id = $existingUser->id;
        $profile->save();
        
        return [
            'action' => 'send_message_and_branches',
            'message' => "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$existingUser->name}!",
            'keyboard' => null
        ];
    }

    protected function createNewUser(TelegramProfile $profile, string $chatId, array $data): array
    {
        Log::info('UserRegistrationService: creating new user');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        $existingUserByTelegram = User::where('telegram', (string)$chatId)->first();
        if ($existingUserByTelegram) {
            Log::info('UserRegistrationService: user already exists with this Telegram ID', [
                'existing_user_id' => $existingUserByTelegram->id,
                'existing_name' => $existingUserByTelegram->name
            ]);
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
            $profile->user_id = $existingUserByTelegram->id;
            $profile->save();
            
            return [
                'action' => 'send_message_and_branches',
                'message' => "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$existingUserByTelegram->name}!",
                'keyboard' => null
            ];
        }
        
        $newUser = User::create([
            'name' => $data['name'] ?? '–ö–ª–∏–µ–Ω—Ç',
            'phone' => $data['phone'],
            'email' => $data['email'] ?? (string)$chatId.'@telegram.local',
            'telegram' => (string)$chatId,
            'password' => '\\',
        ]);
        
        Log::info('UserRegistrationService: new user created', ['user_id' => $newUser->id]);

        $profile->user_id = $newUser->id;
        $profile->save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        try {
            $this->notificationService->notifyAboutBotRegistration($newUser);
        } catch (\Exception $e) {
            Log::error('Failed to send notification about bot registration', [
                'user_id' => $newUser->id,
                'error' => $e->getMessage()
            ]);
        }

        return [
            'action' => 'send_message_and_branches',
            'message' => '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º.',
            'keyboard' => null
        ];
    }

    protected function prepareProfileConfirmation(TelegramProfile $profile, string $chatId, User $existingUser, string $normalizedPhone): array
    {
        $profile->data = array_merge($profile->data ?? [], [
            'found_user_id' => $existingUser->id,
            'found_user_name' => $existingUser->name,
            'found_user_phone' => $normalizedPhone
        ]);
        $profile->state = 'confirm_profile';
        $profile->save();
        
        return [
            'action' => 'show_profile_confirmation',
            'user' => $existingUser,
            'message' => null,
            'keyboard' => null
        ];
    }

    protected function handleUserNotFound(string $chatId, string $normalizedPhone): array
    {
        Log::warning('UserRegistrationService: user not found by phone', [
            'searched_phone' => $normalizedPhone,
            'all_users_with_phones' => User::pluck('phone')->toArray()
        ]);
        
        $keyboard = [
            [
                ['text' => 'üë§ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'callback_data' => 'existing_account'],
                ['text' => 'üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç', 'callback_data' => 'new_user']
            ]
        ];
        
        return [
            'action' => 'send_message',
            'message' => '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.',
            'keyboard' => $keyboard
        ];
    }

    public function startRegistration(string $chatId): array
    {
        Log::info('UserRegistrationService: starting registration process', ['chat_id' => $chatId]);
        
        $profile = TelegramProfile::where('telegram_id', (string)$chatId)->first();
        if ($profile) {
            $profile->state = 'await_name';
            $profile->save();
        }
        
        return [
            'action' => 'send_message',
            'message' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç.',
            'keyboard' => null
        ];
    }

    public function handleExistingAccount(string $chatId, TelegramProfile $profile): array
    {
        Log::info('UserRegistrationService: handling existing account', ['chat_id' => $chatId]);
        
        $profile->state = 'await_phone_existing';
        $profile->save();
        
        $message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n\n";
        $message .= "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n";
        $message .= "‚Ä¢ +7XXXXXXXXXX\n";
        $message .= "‚Ä¢ 8XXXXXXXXXX\n";
        $message .= "‚Ä¢ 7XXXXXXXXXX\n";
        $message .= "‚Ä¢ 8 967-411 5225\n";
        $message .= "‚Ä¢ +7 (963) 45-78 456\n";
        $message .= "‚Ä¢ 8.967.411.52.25\n\n";
        $message .= "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–µ—Ä–µ—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.";
        
        return [
            'action' => 'send_message',
            'message' => $message,
            'keyboard' => null
        ];
    }

    public function confirmExistingEmailUser(string $chatId, TelegramProfile $profile): array
    {
        $data = $profile->data ?? [];
        $foundUserId = $data['found_user_id'] ?? null;
        
        if (!$foundUserId) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        $user = User::find($foundUserId);
        if (!$user) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return $this->sendVerificationCodeForExistingUser($profile, $chatId, $data, $user);
    }

    public function confirmExistingPhoneUser(string $chatId, TelegramProfile $profile): array
    {
        $data = $profile->data ?? [];
        $foundUserId = $data['found_user_id'] ?? null;
        
        if (!$foundUserId) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        $user = User::find($foundUserId);
        if (!$user) {
            return [
                'action' => 'send_message',
                'message' => '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
                'keyboard' => null
            ];
        }

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        $profile->user_id = $user->id;
        $profile->state = 'start';
        $profile->data = [];
        $profile->save();

        // –û–±–Ω–æ–≤–ª—è–µ–º telegram ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user->telegram = (string)$chatId;
        $user->save();

        Log::info('UserRegistrationService: existing phone user confirmed and linked', [
            'user_id' => $user->id,
            'user_name' => $user->name
        ]);

        return [
            'action' => 'send_message_and_branches',
            'message' => "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {$user->name}!",
            'keyboard' => null
        ];
    }

    public function useDifferentEmail(string $chatId, TelegramProfile $profile): array
    {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É email
        $data = $profile->data ?? [];
        unset($data['email']);
        $profile->data = $data;
        $profile->state = 'await_email';
        $profile->save();

        return [
            'action' => 'send_message',
            'message' => "–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π email –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\nüìß Email –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è:\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É",
            'keyboard' => null
        ];
    }

    public function useDifferentPhone(string $chatId, TelegramProfile $profile): array
    {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        $data = $profile->data ?? [];
        unset($data['phone']);
        $profile->data = $data;
        $profile->state = 'await_phone';
        $profile->save();

        return [
            'action' => 'send_message',
            'message' => "–•–æ—Ä–æ—à–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\nüì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n‚Ä¢ +7XXXXXXXXXX\n‚Ä¢ 8XXXXXXXXXX\n‚Ä¢ 7XXXXXXXXXX\n‚Ä¢ 8 967-411 5225\n‚Ä¢ +7 (963) 45-78 456\n‚Ä¢ 8.967.411.52.25\n\n–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–µ—Ä–µ—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.",
            'keyboard' => null
        ];
    }
}
